/**
 * THE PROBLEM

        The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number
        would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

        We can see that 28 is the first triangle number to have over five divisors.

        What is the value of the first triangle number to have over five hundred divisors?

 */

public class HighlyDivisibleNumber {

    public static void main(String[] args){

       System.out.println(getHiglyDivisibleTriangleNUmber(500));
    }

    /**
     *
     * @param n - Max number of divisors
     * @return triangle_number - the first triangle number with the specified number of divisors
     */

    public static int getHiglyDivisibleTriangleNUmber(int n){
        int triangle_number = 0;
        int i = 0;
        while (getNumberOfDivisors(triangle_number) < n){
            triangle_number += i;
            i++;

        }
        return triangle_number;
    }

    /**
     *
     * @param dividend - number which we are getting number of divisors
     * @return divisors_count
     */

    public static int getNumberOfDivisors(int dividend){

        int divisors_count = 0;


        /**---------------------------------------------------------------------------
         * Earlier I had done this
         *
         *  for ( int i = 1; i <= dividend; i++){
         *      if ((dividend%i) == 0){
         *                 divisors_count ++;
         *             }
         *  }
         *  return divisors_count;
         *
         *  However I noticed it is taking very long, upto more than 4mins.
         *  Then I changed to the code below. It performance seems to have improved though not the best.
         *  Kindly advice on this.
         ------------------------------------------------------------------------------*/
        for (int i = 1; i*i <= dividend; i++){
            //
            if ((dividend % i) == 0){
                divisors_count ++;
            }
        }
//
//
        return divisors_count*2;
    }
}
